#!/bin/bash

SUCCESS=0
ERR_FAIL_RESTORE=1
ERR_FAIL_UPDATE=2
ERR_FAIL_INSTALL=3
ERR_CANCEL_INSTALL=4
ERR_IMPOSSIBLE=-1
NO_ERR=0

function bck {
    FULLPATH="$(readlink -f "$1")"
    DST="${2%/}/$(dirname $FULLPATH)"
    mkdir -p "$DST"
    cp -r --preserve=all "$FULLPATH" "$DST/$(basename $FULLPATH)"
}

function rst {
    [[ ! -d "$LEGACY" ]] && echo >&2 "Rollback failed : Unknown folder $LEGACY" && exit $ERR_FAIL_RESTORE
    cp -rf "$LEGACY"/* /
    [[ $? -ne 0 ]] && echo >&2 "Rollback failed" && exit $ERR_FAIL_RESTORE
}

set -u
echo "Check rights"

if [ "$(id -u)" != "0" ]; then
   echo "This script must be run as root" 1>&2
   exit 1
fi

# http://stackoverflow.com/questions/59895/can-a-bash-script-tell-what-directory-its-stored-in
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
  DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"

echo "Running from $DIR"

echo "Check dependencies"

apt-get update -qq
for i in lsb-release wget dialog whiptail
do
	dpkg -l | grep -q $i
	if [[ $? -eq 1 ]]
	then
		apt-get install $i -y
	fi
done

# Fix install on jessie
if [ $(lsb_release -c | awk '{print $2}') = jessie ];
then
	apt-get install python-xmpp -y
fi

if [[ ! -f /etc/yunohost/yunohost.conf ]]
then
mkdir /etc/yunohost/
touch /etc/yunohost/from_script
cat << EOF > /etc/yunohost/yunohost.conf
# Yunohost custom config
# If you want to keep a custom service configuration replace "no" by "yes"
# for the concerned service

amavis=no
avahi=no
dovecot=no
iptables=no
metronome=no
mysql=no
nginx=no
postfix=no
samba=no
slapd=no
ssh=yes
ssowat=no
EOF
fi

echo "Checking domain"
DOMAIN=$(hostname -d)
if [[ "${DOMAIN:-1}" = 1 ]]
then
    hostname yunohost.yunohost.org
    DOMAIN='yunohost.org'
fi

YESNO=0

if [[ $YESNO -eq 0 ]]
then
	# Backup folder for legacy config files
	LEGACY=/etc/yunohost/.legacy
	mkdir -p "$LEGACY"

	echo "Adding repositories"

	CUSTOMAPT=/etc/apt/sources.list.d/yunohost.list

	grep -qri "yunohost" $CUSTOMAPT
	if [[ $? -eq 1 ]]
	then
		echo "deb http://repo.yunohost.org/ megusta main" >> $CUSTOMAPT
	fi

	if [ $# -gt 0 ]; then
		if [[ "$1" == "test" ]] || [[ "$1" == "testing" ]] ; then
			echo "deb http://daily.yunohost.org/ testing main" >> $CUSTOMAPT
		fi
		if [[ "$1" == "daily" ]] || [[ "$1" == "unstable" ]] ; then
			echo "deb http://daily.yunohost.org/ testing main" >> $CUSTOMAPT
			echo "deb http://daily.yunohost.org/ unstable main" >> $CUSTOMAPT
		fi
	fi

        #Get gpg key
        wget -O- http://repo.yunohost.org/yunohost.asc -q | apt-key add - -qq

	#Update repo
		apt-get update -qq

	if [[ $? -ne 0 ]]
	then
		echo "Update Repo Failure : Rolling back"
		rst "$LEGACY"
		exit $ERR_FAIL_UPDATE
	fi
	
	chmod 755 / *

	echo "Installation"
	#add answer in debconf db
	if [ $(lsb_release -c | awk '{print $2}') = jessie ];
	then
        	debconf-set-selections $DIR/debconfjessie
	else
		debconf-set-selections $DIR/debconfv2
	fi

	#Install yunohost packages
		apt-get -o Dpkg::Options::="--force-confold" \
			-y install \
            -qq \
			yunohost \
			yunohost-config \
			yunohost-config-postfix \
			postfix postfix-ldap \
			postfix-policyd-spf-perl

	if [[ $? -ne 0 ]]
	then
		echo "Installation failed !"
		echo "Rolling back have to be done manually"
		echo "Check your legacy configuration files => '$LEGACY'"
		echo "Check install logs => '/var/log/yunohost.log' and '/var/log/yunohost.error'"
		exit $ERR_FAIL_INSTALL
	else
		service slapd restart
		service iptables start
		service nscd restart
		service nslcd restart

		echo -e "\n"
	fi

else
	echo "Installation cancelled"
	exit $ERR_CANCEL_INSTALL
fi

# Security : we shouldn't be able to exit here
exit $NO_ERR
